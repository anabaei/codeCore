<div class="question-details">
  <div>
    <h1><%= @question.title %></h1>
    <p><%= @question.body %></p>

    <p><strong>Tags: </strong> <%= @question.tag_list %></p>
    <p><strong>Author: </strong> <%= @question.user&.full_name %></p>


    <div class="like-widget">
      <% if user_signed_in? && can?(:like, @question) %>
        <% if @like.present? %>
          <%= link_to fa_icon('heart lg'), question_like_path(@question, @like), method: :delete %>
        <% else %>
          <%= link_to fa_icon('heart-o lg'), question_likes_path(@question), method: :post %>
        <% end %>
      <% end %>
      <%= pluralize @question.likes.count, 'like' %>
    </div>

    <%# can? is a helper method that came from the CanCanCan gem which will check the
        rules in our /app/models/ability.rb file %>
    <% if user_signed_in? && can?(:manage, @question) %>
      <%= link_to 'Edit', edit_question_path(@question) %>
      <%# When you use `method: :delete`, Rails will use
      Javascript to mimick a delete request to the server %>
      <%= link_to 'Delete',
        question_path(@question),
        method: :delete %>

      <% if @question.draft? %>
        <%= link_to 'publish', question_publishings_path(@question),
                               method: :post %>
      <% end %>
    <% end %>

  </div>
  <%= image_tag @question.image.medium.url if @question.image.present? %>
</div>

<h2>Answers</h2>

<%# If we want to create a form for a resource that is nested inside another,
we must give `form_for` the resources in array in the order of parent to descendant
like below. This will create a `form` with `question_answers_path(@question)` for
its `action` attribute. Inspect this form to know more! %>

<!-- <% unless @answer.errors.empty? %>
<div>
  <%= @answer.errors.full_messages.join(', ') %>
</div>
<% end %> -->

<% if user_signed_in? %>
  <%= render 'answers/form', question: @question, answer: @answer %>
<% end %>

<%= render 'answers/answers', answers: @answers %>









<!---->
